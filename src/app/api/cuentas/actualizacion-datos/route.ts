import { supabase } from "@/lib/supabase";
import { NextResponse } from "next/server";

export async function PUT(req : Request) {
    try {
        // 1. LECTURA DEL CUERPO
        const body = await req.json();

        // üí° NOTA: En una aplicaci√≥n real, el ID del usuario no vendr√≠a en el body,
        // sino que se obtendr√≠a del token de sesi√≥n o de las cookies para saber
        // qu√© usuario est√° logueado y qu√© fila actualizar.
        // Aqu√≠ asumimos que el 'email' es el identificador √∫nico.
        
        const { email, password_hash, ...fieldsToUpdate } = body;

        // 2. VALIDACI√ìN B√ÅSICA (Asegurar que al menos tenemos el identificador)
        if (!email) {
            return NextResponse.json({ ok: false, error: 'Identificador (email) de usuario faltante.' }, { status: 400 });
        }

        // 3. CONSTRUIR EL OBJETO DE ACTUALIZACI√ìN
        // Excluir campos que no deber√≠an actualizarse o que vienen vac√≠os del formulario
        const updatePayload: any = { ...fieldsToUpdate };

        // Incluir la contrase√±a SOLO si se proporciona una nueva
        if (password_hash) {
            // ‚ö†Ô∏è ADVERTENCIA: En un entorno real, aqu√≠ deber√≠as HASHEAR la contrase√±a
            // antes de guardarla en la base de datos.
            updatePayload.password_hash = password_hash;
        }

        // 4. INTERACCI√ìN CON SUPABASE (Actualizaci√≥n)
        // Usamos el email como filtro (eq) para saber qu√© fila actualizar
        const { data: updatedProfile, error } = await supabase
            .from('accounts')
            .update(updatePayload)
            .eq('email', email) // ‚¨ÖÔ∏è Condici√≥n para actualizar solo la fila del usuario
            .select('*')
            .single(); // Esperamos que solo se actualice una fila

        // 5. MANEJO DE ERRORES DE SUPABASE
        if (error) {
            console.error("Error de Supabase al actualizar:", error);
            // Error 404/400 si el registro no existe o falla la validaci√≥n
            return NextResponse.json({ ok: false, error: error.message }, { status: 400 }); 
        }

        // 6. RESPUESTA EXITOSA
        // Quitamos la contrase√±a antes de devolver el objeto
        const { password_hash: _, ...safeProfile } = updatedProfile;

        return NextResponse.json({ ok: true, profile: safeProfile }, { status: 200 });
        
    } catch (unexpectedError) {
        console.error("Error inesperado en el Route Handler (Actualizaci√≥n):", unexpectedError);
        
        return NextResponse.json(
            { ok: false, error: 'Error interno del servidor al procesar la actualizaci√≥n.' }, 
            { status: 500 }
        );
    }
}